server:
  port: 8086

spring:
  application:
    name: user-service
  datasource:
    url: jdbc:postgresql://localhost:5432/ops?currentSchema=user
    username: ops
    password: ops
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    enabled: true
    schemas: user
    locations: classpath:db/migration
    baseline-on-migrate: true

# Kafka configuration
kafka:
  bootstrap-servers: localhost:9092
  consumer:
    group-id: user-service-group
    auto-offset-reset: earliest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer

# RabbitMQ configuration
rabbitmq:
  host: localhost
  queue: user-service-queue

# Logging
logging:
  level:
    root: INFO
    com.yipintsoi.userservice: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true

# Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      authServiceClient:
        slidingWindowSize: 10
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 5s

# Application specific properties
app:
  topic:
    auth-events: auth-events
    user-events: user-events

# External services
services:
  auth-service:
    url: http://localhost:8081